#include "windows.h"#include <iostream>#include <string>#include <fstream>#define REGISTER 69#define USE 420#define DELETE 2003#define FILE_NAME "Clipboard.txt"#define DELIMITER '|'template <typename t>struct DynamicArray {private:    t* array;    int size;public:    DynamicArray() {        array = nullptr;        size = 0;    }    ~DynamicArray() {delete[] array;}    void add(t element) {        t* temp = new t[size+1];        for(int i=0; i<size; i++) {            temp[i] = array[i];        }        temp[size++] = element;        array = temp;    }    t get(int index) {        return array[index];    }    int indexOf(t element) {        for(int i=0; i<size; i++) {            if(array[i]==element) {return i;}        }        return -1;    }    void remove(int index) {        t* temp = new t[size--];        for(int i=0; i<size+1; i++) {            if(i!=index) {temp[i] = array[i];}        }        array = temp;    }    std::string toString() {        std::string str = "";        str+='[';        for(int i=0; i<size; i++) {            str+=array[i];            if (i!=size-1) {str+=", ";}        }        str+=']';        return str;    }    int length() {        return size;    }};int find(std::string str, char x) {    for(int i=0; i<str.length(); i++) {        if(str[i]==x) {return i;}    }    return -1;}void updateFile(DynamicArray<std::string>* k, DynamicArray<std::string>* v) {    std::fstream file;    file.open(FILE_NAME, std::fstream::out);    if(file.is_open()) {        for(int i=0; i<k->length(); i++) {            file << k->get(i) << DELIMITER << v->get(i) << std::endl;        }        file.close();    }    else {std::cout << "Can't open clipboard file: " << FILE_NAME << std::endl;}}int main() {    FreeConsole();    DynamicArray<std::string> keys;    DynamicArray<std::string> values;    std::fstream f;    f.open(FILE_NAME, std::fstream::in);    if(f.is_open()) {        std::string temp;        while(std::getline(f, temp)) {            int x = find(temp, DELIMITER);            if(x!=-1) {                keys.add(temp.substr(0, x));                values.add(temp.substr(x+1, temp.length()-(x+1)));            }            else {std::cout << "Error in Clipboard File" << std::endl;}        }        f.close();    }    else {        std::ofstream temp;        temp.open(FILE_NAME);        temp.close();    }    //register hotkey alt+shift R    RegisterHotKey(NULL, REGISTER, MOD_ALT|MOD_SHIFT|MOD_NOREPEAT, 0x52);    //register hotkey alt+shift U    RegisterHotKey(NULL, USE, MOD_ALT|MOD_SHIFT|MOD_NOREPEAT, 0x55);    //register hotkey alt+shift D    RegisterHotKey(NULL, DELETE, MOD_ALT|MOD_SHIFT|MOD_NOREPEAT, 0x44);    MSG msg = {0};    while(GetMessage(&msg, NULL, 0, 0)!=NULL) {        if(msg.message==WM_HOTKEY) {            if(msg.wParam==REGISTER) {                if(OpenClipboard(NULL)) {                    HANDLE reg = GetClipboardData(CF_TEXT);                    if(reg!=NULL) {                        LPTSTR temp = (LPTSTR)GlobalLock(reg);                        if(temp!=nullptr) {                            std::string str = std::string((char*)((LPSTR)temp));                            int x = find(str, DELIMITER);                            if(x!=-1) {                                if(keys.indexOf(str.substr(0, x))!=-1) {std::cout << str.substr(0, x) << " has already been registered" << std::endl;}                                else {                                    keys.add(str.substr(0, x));                                    values.add(str.substr(x+1, str.length()-(x+1)));                                    f.open(FILE_NAME, std::fstream::app);                                    if(f.is_open()) {f << str << std::endl; f.close();}                                    else {std::cout << "Can't open clipboard file: " << FILE_NAME << std::endl;}                                }                            }                            else {std::cout << "Error registering " << str << std::endl;}                        }                        GlobalUnlock(reg);                    }                }                while(!CloseClipboard());            }            else if(msg.wParam==DELETE) {                if(OpenClipboard(NULL)) {                    HANDLE reg = GetClipboardData(CF_TEXT);                    if(reg!=NULL) {                        LPTSTR temp = (LPTSTR)GlobalLock(reg);                        if(temp!=nullptr) {                            std::string str = std::string((char*)((LPSTR)temp));                            int index = keys.indexOf(str);                            if(index==-1) {std::cout << "Error: " << str << " has not been registered" << std::endl;}                            else {                                keys.remove(index);                                values.remove(index);                                updateFile(&keys, &values);                            }                        }                        GlobalUnlock(reg);                    }                }                while(!CloseClipboard());            }            else if(msg.wParam==USE) {                if(OpenClipboard(NULL)) {                    HANDLE reg = GetClipboardData(CF_TEXT);                    if(reg!=NULL) {                        LPTSTR temp = (LPTSTR)GlobalLock(reg);                        if(temp!=nullptr) {                            int x = keys.indexOf(std::string((char*)((LPSTR)temp)));                                         if(x!=-1) {                                std::string str = values.get(x);                                HGLOBAL h = GlobalAlloc(GMEM_MOVEABLE, str.length()+1);                                char* chararr = (char*)GlobalLock(h);                                for(int i=0; i<str.length(); i++) {                                    chararr[i] = str[i];                                }                                chararr[str.length()] = '\0';                                GlobalUnlock(chararr);                                EmptyClipboard();                                if(SetClipboardData(CF_TEXT, h)==NULL) {std::cout << "Error, could not set clipboard data" << std::endl;}                            }                            else {std::cout << "Error: " << std::string((char*)((LPSTR)temp)) << " has not been registered" << std::endl;}                        }                        GlobalUnlock(reg);                    }                }                while(!CloseClipboard());            }        }    }}